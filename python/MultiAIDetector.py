import requests
import json

# User-defined API keys and tokens
WINSTON_API_KEY = "Your API Key here"
WINSTON_BEARER_TOKEN = "Your Token here"
ORIGINALITY_API_KEY = "Your API Key here"
GPTZERO_API_KEY = "Your API Key here"

def callAIContentDetector_v1(text):
    endpoint_url = 'https://cdapi.goom.ai/api/v1/content/detect'
    headers = {'Content-Type': 'application/json', 'referer': 'https://contentdetector.ai/'}
    data = {"content": text}
    response = requests.post(endpoint_url, headers=headers, json=data)
    if response.status_code == 200:
        return json.loads(response.text)['fake_probability']
    else:
        return "Error"

def callAIContentDetector_v2(text):
    endpoint_url = 'https://cdapi.goom.ai/api/v2/detect/ai_content'
    headers = {'Content-Type': 'application/json', 'referer': 'https://contentdetector.ai/'}
    data = {"content": text}
    response = requests.post(endpoint_url, headers=headers, json=data)
    if response.status_code == 200:
        return json.loads(response.text).get('ai_percentage', -1) / 100  # Normalize to [0, 1]
    else:
        return "Error"

def winston_predict(text):
    API_URL = "https://api.gowinston.ai/functions/v1/predict"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {WINSTON_BEARER_TOKEN}'
    }
    data = {
        "api_key": WINSTON_API_KEY,
        "text": text,
        "sentences": True,
        "language": "en"
    }
    response = requests.post(API_URL, json=data, headers=headers)
    if response.status_code == 200:
        score = response.json().get('score', None)
        if score is not None:
            return 1 - (score / 100)  # Normalize to [0, 1] and invert
        else:
            return "Error: Score is None"
    else:
        return "Error: API Request Failed"

def check_originality(text):
    BASE_URL = "https://api.originality.ai/api/v1/scan/ai"
    headers = {
        "Accept": "application/json",
        "X-OAI-API-KEY": ORIGINALITY_API_KEY,
        "Content-Type": "application/json"
    }
    response = requests.post(BASE_URL, headers=headers, json={"content": text, "title": "optional title", "aiModelVersion": "1", "storeScan": "false"})
    if response.status_code == 200:
        return response.json()["score"]["ai"]
    else:
        return "Error"

def gptzero_check(text):
    API_URL = "https://api.gptzero.me/v2/predict/text"
    headers = {
        "x-api-key": GPTZERO_API_KEY,
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    payload = {"document": text, "version": "2023-09-14"}
    response = requests.post(API_URL, json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()['documents'][0]['completely_generated_prob']
    else:
        return "Error"

if __name__ == "__main__":
    user_input = input("Please enter the text you want to analyze: ")

    print("Sending the text to various APIs for analysis... Note that if the result is closer to 0 it means it is more likely to have been written by a human, and closer to 1 it means it is likely to have been generated by an AI.")
    ai_content_detector_result_v1 = callAIContentDetector_v1(user_input)
    ai_content_detector_result_v2 = callAIContentDetector_v2(user_input)
    winston_result = winston_predict(user_input)
    originality_result = check_originality(user_input)
    gptzero_result = gptzero_check(user_input)
    
    print(f"AI Content Detector v1 Result: {ai_content_detector_result_v1}")
    print(f"AI Content Detector v2 Result: {ai_content_detector_result_v2}")
    print(f"Winston.AI Result: {winston_result}")
    print(f"Originality.AI Result: {originality_result}")
    print(f"GPTZero Result: {gptzero_result}")
